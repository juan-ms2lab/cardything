// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]
  settings      UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Board {
  id          String   @id @default(cuid())
  name        String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns     Column[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Column {
  id        String @id @default(cuid())
  name      String
  position  Int
  boardId   String
  board     Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          String   @id @default(cuid())
  name        String
  color       String   @default("#3b82f6") // default blue
  position    Int
  columnId    String
  column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          String    @id @default(cuid())
  name        String
  completed   Boolean   @default(false)
  dueDate     DateTime?
  position    Int
  cardId      String
  card        Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserSettings {
  id                    String @id @default(cuid())
  userId                String @unique
  user                  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  backgroundColor       String @default("#f8fafc")
  todayColor           String @default("#facc15")
  thisWeekColor        String @default("#22c55e")
  overdueColor         String @default("#ef4444")
  todayThreshold       Int    @default(0) // days
  thisWeekThreshold    Int    @default(7) // days
  twoWeekThreshold     Int    @default(14) // days
  spacingLevel         Int    @default(75) // 0-100, 75 is current default
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}